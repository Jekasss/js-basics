// унарный - меняет знак числа
let x = 1;

x = -x;
console.log (x);

y = 6;

console.log (x + y);
// % - Взятие остатка от целочисленного деления a на b
console.log (17 % 3);
// ** - Возведение в степень
console.log (7 ** 4);
// Возведение в степень не целого числа по сути - взятие корня
console.log (49 ** (1/2));

// Если применить бинарный оператор сложения к строкам он объединит их в одну

console.log ("Моя" + " " + "cтрока");

// Если хотя бы один операнд является строкой, второй так же будет преобразован к строке
let c = 1 + "15"
console.log (c);
console.log (c = Number(c));

//все операторы кроме + преобразовывают операнды в числа и работают только с чилами

console.log (12 - "7");
console.log ("72" / "8");

// унарный + преобразует операнд в число
// то же самое что и Number 

console.log (+true);
console.log (+"");
console.log (+undefined);

//обычно значения полей в HTML это строки но часто их необходимо складывать

let apples = "2";
let oranges = "3";
console.log (apples + oranges);
console.log (+apples + +oranges);
// Или
console.log (Number(apples) + Number(oranges));

// Унарные операторы приорететнее бинарных
// далее идёт возведение в степень
// бинарные умножение и деление
// бинарные сложение вычитание
// оператор присваивани имеет один из самых низкий приоритеов, поэтому присваиваниеи происходит после выполнения всех арифметических операторов

// Присваивание "=" так же возвращает значение
// его можно использовать как часть более сложного выражения

let d = 1;
let e = 4;

let f = 6 * ((2 + (e = 3 + d)) + (d = e / 2)); // так делать не желательно

d = e = f = 75 / 3; //так же не рекомендовано использовать
console.log(d);
console.log(e);
console.log(f);

// Иногда необходимо применить оператор к переменной и сохранить результат в ней жеж
// это можно записать двумя способами

let g = 5;
g = g + 6;
g = g * 3;
console.log(g);

// Или сокращённо

g += 12;
g *= 2;
console.log(g)

//одной из наиболее частых операций является цвеличение(Инкремент) или уменьшение(Декремент) на единицу
// Оператор инкремент обозначается ++
// Оператор декремент обозначается --

let counter = 2;
counter++;
counter++;
console.log(counter);
counter--;
console.log(counter);

// Этих операторы можно применять только к переменным. Применение его к значению, например, 6++ приведт к ошибке;
/*
Возможны 2 варианта записи:
Постфиксная ++counter
Префиксная counter++
Отличия между ними в том что префиксная форма возвращает новое значение
постфиксная возвращает старое
*/
counter = 7;
let h;
h = ++counter;
console.log(h);

counter = 7;
h = counter++;
console.log(h);

counter = 1;
console.log(2 * ++counter); // результат 4

counter = 1;
console.log(2 * counter++); // результат 2

// Лучше такую запись не использовать
// Лучше разделять
counter = 1;
console.log(2* counter);
counter++;
