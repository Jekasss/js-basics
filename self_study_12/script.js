/*
Особенности JavaScript

Струтура кода
команды разделяются запятыми
alert("Hello"); alert("World");

перевод строки также интерпретируется как разделитель
alert("Hello")
alert("World")

но не всегда срабатывает:

alert ("Wait for the error after this message")
[1, 2].forEach(alert)

Точка с запятой не требуется после блоков кода {...}
*/


/*
Строгий режим

Чтобы по максимуму использовать возможности JS,
все скрипты рекомендуется начинать с добавления
директивы "use strict"
необходимо размещать в первой строке скрипта
или в начале тела функции

некоторые конструкции такие как классы включают строгий режим
*/

/*
Переменные

объявляются при помощи:
let переменная;
const константа, не возможно изменить;
var устаревший способ.

- имя переменной может включать цифры, но не может с них начинаться
- символы $ и _ могут использоваться как буквы
- Иероглифы и символы не латиницы допустимы но не используются

переменные типизируются динамически, могут хранить любые значения

let x = 5;
x = "Вася";

Всего 8 типов данных в JS:

number целое вещественное число
bigint целое большое число произвольной длины
string строка
bulean логические значения true/false
null пустое значение
undefined значение не задано
object и symbol сложные структуры данных и уникальные идентификтаторы

оператор typeof возвращает тип значения переменной
кроме null == object(ошибка языка) и function(){} == function
*/

/*
Взаимодействие с посетителем
prompt - задаёт вопрос и возвращает введённые пользователем данные
или null при отмене

confirm - предлагает согласиться(OK) или отказаться(Отмена)
возвращается в формате false/true

alert - выводит сообщение

все эти функции выводят модальное окно и не дают 
взаимодействовать со страницей пока не получат ответ
*/

/*
"Операторы"

"Арифметические" * + - / %(остаток от деления) **(возведение в степень)
бинарный + объединяет строки. Если один из операндов
строка, второй преобразовывается в строку 

"Операторы присваивания"
простой - а = b
составные - c *= 2

"Битовые"
работают с 32-битными целыми числами
на самом низком побитовом уровне

"Условный оператор"
единственный оператор с тремя параметрами:
cond ? rersultA : resultB
если условие истинно возвращает первое значение,
в противном случае второе

"Логические операторы"
И &&, ИЛИ || возвращает значение на котором остановилось
не обязательно истинное
НЕ ! конвертирует операнд в логический тип
и возвращает инвертированное значение.

"Оператор нулевого слияния"
a ?? b результат a если оно не равно null/undefined иначе b

"Сравнение"
== сравнивает значения разных типов, конвертирует их в число
проме null и undefined, они равны только друг другу

=== не приводит типы данных к числу.
проверяет сначала типы, если они равны 
продолжает сравнение значений
операторы < и > сравнивают строки посимвольно,
остальные конвертируются в число
*/

/*
"Циклы"
Изучили три вида циклов:
С предусловием 
while (condition) {
    ...
}

С постусловием
do {
    ...
} while (condition);

С заданным количеством итераций
for(let i = 0; i < 10; i++) {
    ...
}
переменная в for инициализируется и может использоваться только в нём
однако можно использовать существующую переменную

Дерктивы break/continue позволяют прервать выполнение
цикла или пропустить итерацию
*/

/*
"Оператор Switch"

Может заменить if, использует строгое равенство ===
*/

/*
"Функции"

Рассмотрели 3 способа задания функции в JS:
Function Declaration Функция в основном потоке кода

function sum (a, b) {
    let result = a + b;

    return result;
}

Function Expression Функция как часть выражения

let sum = function (a, b) {
    let result = a + b;

    return result;
};

Стрелочные функции:

let sum = (a, b) => a + b;  // return не нужен

let sum = (a, b) => {       // в фигурных скобках
    ...
    return                  // return обязателен
}

локальные переменные объявленные в теле функции
существуют только в самой функции

параметры могут иметь значения по умолчанию

Функции всегда что-то возвращают.
Если нет return функция вернёт undefined
*/