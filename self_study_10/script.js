/*
Ранее мы использовали синтаксис который называется
"Объявление функции"("Function Declaration"):
function sayHi() {
    alert( "Привет!" );
}
*/

/*
Так же есть синтаксис который называется
"Функциональное выражение"("Function Expression"): 
let sayHi = function() {
    alert( "Привет!" );
};
*/

/* 
Смысл данных примеров по сути одинаков
Функция это значение и ы можем делать с ней тоже самое,
что и с любым другим значением.
Например мы можем её скопиоватьЖ

function sayHi() {
    alert( "Привет" );
}

let func = sayHi;

func();
sayHi();

в строке
let func = sayHi
нет круглых скобок.
Если бы они были в переменную записался бы результат
вызова функции, а не сама функция
Далее мы вызываем функцию с помощью обеих переменных
*/
/* 
function ask (question, yes, no) {
    if (confirm(question)) {
        yes();
    } else {
        no();
    }
}

function showOk() {
    alert( "Вы согласны!");
}

function showCansel() {
    alert( "Вы отменили выполнение.");
}

ask ("Вы согласны?", showOk, showCansel);
*/

//Можно записать функцию более коротко:
/* 
function ask (question, yes, no) {
    if (confirm(question)) {
        yes();
    } else {
        no();
    }
}

ask ("Вы cогласны?",
    function() {
        alert("Вы согласились!");
    },
    function() {
        alert("Вы отменили выполнение");
    }
);
 */
// функции у которых не имени называются анонимными

/*
ОТЛИЧИЯ FUNCTION DECLARATION от FUNCTION EXPRESSION:
FD - объявляется отдельной конструкцией в основном потоке кода
FE - создаётся внутри другого выражения или синтаксической конструкции

Более тонкое отличие состоит в том, когда создаётся функция движком JS:

FD
можно использовать во всём скрипте или блоке кода
т.е. когда движок JS готовится выполнить скрипт или блок когда
сначала он ищет в нём FD и создаёт такие функции
и после этого продолжает выполняться.
Функции созданные как FD могут быть вызваны раньше своих определений 
Например:

sayHi("Вася");

function sayHi(name) {
    alert ( `Привет, ${name}` );
}
код сработает потому что функция была инициализирована
перед выполнением скрипта

FE
создаётся когда до него доходит выполнение кода
Например:

sayHi("Петя");

let sayHi = function(name) {
    alert( `Привет, ${name}` );
}
не сработает
*/

/*
Ещё одна особенность FD заключается в блочной области видимости
let age = prompt("Сколько Вам лет?", 18 );

if (age < 18) {

    welcome(); //Выполнится

    function welcome() {
        alert("Hello");
    }
    
    welcome();  //Выполнится

} else {

    function welcome() {
        alert("Здравствуйте!");
    }
}

welcome(); // Не выполнится welcome is not defined


Чтобы welcome была видна снаружи if 
можно объявить переменную снаружи и присвоить ей значение welcome

let age = prompt("Сколько Вам лет?", 18);

let welcome;

if (age < 18) {

    welcome = function() {
        alert("Привет!");
    };
} else {

    welcome = function() {
        alert("Здравствуйте!");
    };
}

welcome();
*/

