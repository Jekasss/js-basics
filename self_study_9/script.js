// Функции

/* 
Если необходимо выполнять одно и то же действие во многих частях программы
используются функции. Они являются основными "строительными блоками".
Есть встроенные функции такие как alert, prompt, confirm.
Но можно создавать и свои
*/
/* 
Чтобы создать функцию(обЪявить)
Пример:
function showMessage() {
    alert("Всем привет!");
}

showMessage - название функции
()          - параметры
{}          - тело функции

Вызвать функцию можно указав её название
Вызов функции выполняет её код.
*/

// Переменные объявленные внутри функции называются локальными и не существуют вне этой функции
/* 
function showMessage() {
    let message = "Привет, я JavaScript!";
    alert (message);
}

showMessage();

alert (mesage);
 */
// Однако глобальные переменные(внешние) могут использоваться в функции
/* 
let userName = "Вася";

function showMessage() {
    let message = 'Привет, ' + userName;
    alert(message);
}

showMessage();
 */

// Функция обладает полным доступом к внешним переменным и может их изменять

/* 
let userName = "Вася";

function showMessage() {
    userName = "Петя";

    let message = 'Привет, ' + userName;
    alert(message);
}

alert (userName);

showMessage();

alert (userName);
 */
// Если внешняя и локальная переменные именют одинаковое название,
// то будет использована внутренняя переменная, внешняя проигнорируется
// Желательно избегать использание глобальных переменных

// Параметры

/* 
в функцию можно передавать любую информацию используя параметры или аргументы
*/
/* 
function showMessage(from, text) {
    alert(from + ', ' + text);
}

showMessage('Алина', 'Привет!');
showMessage('Алина', 'Как твои дела?');
*/


/* 
При вызове функции со значениями в скобках,
эти значения присваиваются локальным переменным
и используются в теле функции
*/
/* 
function showMessage(from, text) {
    from = '*' + from + '*';
    alert( from + ', ' + text);
}

let from = 'Алина';

showMessage(from, "Привет");

alert( from );
*/
/*
параметр - переменная, указанная в круглых скобках в объявлении функции
аргумент - значение, передаваемое функции при её вызове

Сначала мы объявляем функции со списком параметров,
затем вызываем их, передавая аргументы

Если при вызове не указать значение параметра,
то его значением будет undefined
*/

// Параметру можно задать значение поумолчанию:
/* 
function showMessage(from, text = 'default text') {
    alert( from + ", " + text);
}

showMessage('Alina');
 */
/* 
Значением по умолчанию может быть не только переменная,
а например другая функция:
function showMessage(from, text = anotherFunction()) {

}
anotherFunction выполнится только если не будет передано значение параметра text извне
*/

// Возврат значения
// Функция может возвращать во внешний код результат,
// Сделать это можно при помощи return
/* 
function sum(a, b) {
    return a + b;
}

let result = sum(+prompt ("введите число"), +prompt ("введите число"));

alert(result);
*/
/*
Return может использоваться несколько раз,
как только выполнение кода дойдёт до этого места,
функция останавливается и возвращает полученное значение во внешний код 
*/
/* 
function checkAge(age) {
    if (age >= 18) {
        return true;
    }   else {
        return confirm('Вы уверенны?');
    }
}

let age = prompt('Сколько Вам лет?');

if (checkAge(age)) {
    alert ('Доступ получен');
} else {
    alert('Доступ закрыт');
}
*/
// Результатом функции с пустым return или без него будет undefined

/*
Примечание
Нельзя переносить строку после return и перед его значением:

return
(some + long + expression + or + whatever * f(a) + f(b))

будет равно

return;
(some + long + expression + or + whatever * f(a) + f(b))

JS ставит точку с запятой после return;

чтобы код ыполнился после return,
его необходимо начать в той же строке
или поставить скобку
*/

/*
Функция это действие, её имя обычно является глаголом.
Как правило используются глагольные префиксы,
которые обозначают характер действия, после них следует уточнение
есть общепринятые имена, например:
get... - возвращает значение;
calc... - вычисляют; 
create... - создают;
check... - проверяют и возвращают логическое значение;
*/
/*
Функция должна делать только то действие,
которое подразумевается её названием.
Два действия подразумевают две функции,
даже если вызываются одновременно  
*/
/* 
function  showPrimes(n) {
    nextPrime: for (let i = 2; i < n; i++) {
        
        for (let j = 2; j < i; j++) {
            if (i % j == 0) {
                 continue nextPrime;
            }
        }

        alert(i);
    }
}

showPrimes(14);
*/
/* 
function showPrimes(n) {

    for (let i = 2; i < n; i++) {
        if (!isPrime(i)) {
            continue;
        } else {
            alert(i);
        }
      
    }
  }
  
function isPrime(n) {
    for (let i = 2; i < n; i++) {
        if ( n % i == 0) {
            return false;
        }
    }
    return true;
  }

  
  showPrimes(7);
*/
/* 
function min(a, b) {
    if (a < b) {
        return a;
    } else if (a > b) {
        return b;
    } else {
        return "Числа равны";
    }
}

alert ("Результат: " + min (+prompt ("введите первое число"), +prompt ("введите второе число")));

 */
/* 
function maxNumberIs (c, d) {
    return (c > d) ? c : (c < d) ? d : "Числа равны";
}

alert ("Результат: " + maxNumberIs (+prompt ("введите первое число"), +prompt ("введите второе число")));
 */

function pow(x, n) {
    let result = x;

    for (let i = 1; i < n; i++) {
        result *=x;
    }
    
    return (result)
}

let x = prompt("введите x:");
let n = prompt("введите n:");

if (n < 1) {
    alert (`Степень ${n} не поддерживается, используйте натуральное число`);
} else {
    alert (pow(x, n));
}